
All.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000442  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800082  00800082  000004f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fcc  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000761  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e0  00000000  00000000  00001d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000022e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e0  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005fa  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002dbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 11 01 	call	0x222	; 0x222 <main>
  8a:	0c 94 1f 02 	jmp	0x43e	; 0x43e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Request>:
void lcd_gotoxy(unsigned char x, unsigned char y);
void lcddata(unsigned char data);

void Request()				/* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT11_PIN);
  92:	81 b3       	in	r24, 0x11	; 17
  94:	80 64       	ori	r24, 0x40	; 64
  96:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<DHT11_PIN);	/* set to low pin */
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	8f 7b       	andi	r24, 0xBF	; 191
  9c:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	87 e8       	ldi	r24, 0x87	; 135
  a0:	93 e1       	ldi	r25, 0x13	; 19
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <Request+0x10>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <Request+0x16>
  a8:	00 00       	nop
	_delay_ms(20);			/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);	/* set to high pin */
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	08 95       	ret

000000b2 <Response>:
}

void Response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
  b2:	81 b3       	in	r24, 0x11	; 17
  b4:	8f 7b       	andi	r24, 0xBF	; 191
  b6:	81 bb       	out	0x11, r24	; 17
	while(PIND & (1<<DHT11_PIN));
  b8:	86 99       	sbic	0x10, 6	; 16
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <Response+0x6>
	while((PIND & (1<<DHT11_PIN))==0);
  bc:	86 9b       	sbis	0x10, 6	; 16
  be:	fe cf       	rjmp	.-4      	; 0xbc <Response+0xa>
	while(PIND & (1<<DHT11_PIN));
  c0:	86 99       	sbic	0x10, 6	; 16
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <Response+0xe>
}
  c4:	08 95       	ret

000000c6 <Receive_data>:

uint8_t Receive_data()			/* receive data */
{
	for (uint8_t q=0; q<8; q++)
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	18 c0       	rjmp	.+48     	; 0xfa <Receive_data+0x34>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
  ca:	86 9b       	sbis	0x10, 6	; 16
  cc:	fe cf       	rjmp	.-4      	; 0xca <Receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Receive_data+0xa>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
  d4:	86 9b       	sbis	0x10, 6	; 16
  d6:	09 c0       	rjmp	.+18     	; 0xea <Receive_data+0x24>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
  d8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <Receive_data+0x2e>
		else			/* otherwise its logic LOW */
		c = (c<<1);
  ea:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
  ee:	88 0f       	add	r24, r24
  f0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
		while(PIND & (1<<DHT11_PIN));
  f4:	86 99       	sbic	0x10, 6	; 16
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <Receive_data+0x2e>
	while(PIND & (1<<DHT11_PIN));
}

uint8_t Receive_data()			/* receive data */
{
	for (uint8_t q=0; q<8; q++)
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	28 30       	cpi	r18, 0x08	; 8
  fc:	30 f3       	brcs	.-52     	; 0xca <Receive_data+0x4>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
  fe:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 102:	08 95       	ret

00000104 <on_and_off>:
 data_dir = 0xFF;
}
/* Keep enable signal on and off to see information on LCD */
void on_and_off()
{
 control_lcd |= 1 << enable; 
 104:	82 b3       	in	r24, 0x12	; 18
 106:	80 61       	ori	r24, 0x10	; 16
 108:	82 bb       	out	0x12, r24	; 18
 asm volatile("nop");
 10a:	00 00       	nop
 asm volatile("nop");
 10c:	00 00       	nop
 control_lcd &= ~(1 << enable);
 10e:	82 b3       	in	r24, 0x12	; 18
 110:	8f 7e       	andi	r24, 0xEF	; 239
 112:	82 bb       	out	0x12, r24	; 18
 114:	08 95       	ret

00000116 <check_lcd>:
}
/* check if LCD is busy------------This is 
 only time when we are reading from LCD */
void check_lcd()
{
 data_dir = 0; // data direction as input
 116:	17 ba       	out	0x17, r1	; 23
 control_lcd |= 1 << rw; // put LCD in read mode, RW ON
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	82 bb       	out	0x12, r24	; 18
 control_lcd &= ~(1 << rs); // put LCD in command mode RS OFF
 11e:	82 b3       	in	r24, 0x12	; 18
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	82 bb       	out	0x12, r24	; 18
 while(data_lcd >= 0b10000000) // D7 pin will be 1 if LCD is busy
 124:	02 c0       	rjmp	.+4      	; 0x12a <check_lcd+0x14>
 {
 on_and_off();
 126:	0e 94 82 00 	call	0x104	; 0x104 <on_and_off>
void check_lcd()
{
 data_dir = 0; // data direction as input
 control_lcd |= 1 << rw; // put LCD in read mode, RW ON
 control_lcd &= ~(1 << rs); // put LCD in command mode RS OFF
 while(data_lcd >= 0b10000000) // D7 pin will be 1 if LCD is busy
 12a:	c7 99       	sbic	0x18, 7	; 24
 12c:	fc cf       	rjmp	.-8      	; 0x126 <check_lcd+0x10>
 {
 on_and_off();
 }
 data_dir = 0xFF;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	87 bb       	out	0x17, r24	; 23
 132:	08 95       	ret

00000134 <send_command>:
 asm volatile("nop");
 control_lcd &= ~(1 << enable);
}
/* send command to instruct lcd */
void send_command(unsigned char command)
{
 134:	cf 93       	push	r28
 136:	c8 2f       	mov	r28, r24
 check_lcd();
 138:	0e 94 8b 00 	call	0x116	; 0x116 <check_lcd>
 data_lcd = command;
 13c:	c8 bb       	out	0x18, r28	; 24
 control_lcd &= ~((1<<rw) | (1<<rs)); // RW-OFF & RS-OFF
 13e:	82 b3       	in	r24, 0x12	; 18
 140:	83 7f       	andi	r24, 0xF3	; 243
 142:	82 bb       	out	0x12, r24	; 18
 144:	00 00       	nop
 	_delay_us(1);
 	control_lcd &= ~(1<<enable);
 146:	82 b3       	in	r24, 0x12	; 18
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	8d ee       	ldi	r24, 0xED	; 237
 14e:	92 e0       	ldi	r25, 0x02	; 2
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <send_command+0x1c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <send_command+0x22>
 156:	00 00       	nop
 	_delay_ms(3);
 on_and_off();
 158:	0e 94 82 00 	call	0x104	; 0x104 <on_and_off>
 data_lcd = 0;
 15c:	18 ba       	out	0x18, r1	; 24
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <send_character>:
/* send character to lcd */
void send_character(unsigned char character)
{
 162:	cf 93       	push	r28
 164:	c8 2f       	mov	r28, r24
 check_lcd();
 166:	0e 94 8b 00 	call	0x116	; 0x116 <check_lcd>
 data_lcd = character;
 16a:	c8 bb       	out	0x18, r28	; 24
 control_lcd &= ~(1 << rw); // RW-OFF
 16c:	82 b3       	in	r24, 0x12	; 18
 16e:	87 7f       	andi	r24, 0xF7	; 247
 170:	82 bb       	out	0x12, r24	; 18
 control_lcd |= 1 << rs; // RS-ON
 172:	82 b3       	in	r24, 0x12	; 18
 174:	84 60       	ori	r24, 0x04	; 4
 176:	82 bb       	out	0x12, r24	; 18
 on_and_off();
 178:	0e 94 82 00 	call	0x104	; 0x104 <on_and_off>
 data_lcd = 0;
 17c:	18 ba       	out	0x18, r1	; 24
}
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <send_string>:
/* send string on lcd */
void send_string(char *StringofCharacters)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
 while(*StringofCharacters>0)
 188:	03 c0       	rjmp	.+6      	; 0x190 <send_string+0xe>
 {
 send_character(*StringofCharacters++);
 18a:	21 96       	adiw	r28, 0x01	; 1
 18c:	0e 94 b1 00 	call	0x162	; 0x162 <send_character>
 data_lcd = 0;
}
/* send string on lcd */
void send_string(char *StringofCharacters)
{
 while(*StringofCharacters>0)
 190:	88 81       	ld	r24, Y
 192:	81 11       	cpse	r24, r1
 194:	fa cf       	rjmp	.-12     	; 0x18a <send_string+0x8>
 {
 send_character(*StringofCharacters++);
 }
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <lcddata>:
void lcddata(unsigned char data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
 19c:	98 b3       	in	r25, 0x18	; 24
 19e:	9f 70       	andi	r25, 0x0F	; 15
 1a0:	28 2f       	mov	r18, r24
 1a2:	20 7f       	andi	r18, 0xF0	; 240
 1a4:	92 2b       	or	r25, r18
 1a6:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
 1a8:	98 b3       	in	r25, 0x18	; 24
 1aa:	94 60       	ori	r25, 0x04	; 4
 1ac:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
 1ae:	98 b3       	in	r25, 0x18	; 24
 1b0:	90 61       	ori	r25, 0x10	; 16
 1b2:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 1b6:	98 b3       	in	r25, 0x18	; 24
 1b8:	9f 7e       	andi	r25, 0xEF	; 239
 1ba:	98 bb       	out	0x18, r25	; 24
 1bc:	31 e2       	ldi	r19, 0x21	; 33
 1be:	3a 95       	dec	r19
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcddata+0x22>
 1c2:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
 1c4:	28 b3       	in	r18, 0x18	; 24
 1c6:	30 e1       	ldi	r19, 0x10	; 16
 1c8:	83 9f       	mul	r24, r19
 1ca:	c0 01       	movw	r24, r0
 1cc:	11 24       	eor	r1, r1
 1ce:	92 2f       	mov	r25, r18
 1d0:	9f 70       	andi	r25, 0x0F	; 15
 1d2:	89 2b       	or	r24, r25
 1d4:	88 bb       	out	0x18, r24	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	80 61       	ori	r24, 0x10	; 16
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
 1de:	88 b3       	in	r24, 0x18	; 24
 1e0:	8f 7e       	andi	r24, 0xEF	; 239
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	83 ef       	ldi	r24, 0xF3	; 243
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcddata+0x4c>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcddata+0x52>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <lcd_gotoxy>:
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE*/
}
void lcd_gotoxy(unsigned char x, unsigned char y)
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <lcd_gotoxy+0x6>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharadd[]={0x80, 0xC0};
 1fc:	90 e8       	ldi	r25, 0x80	; 128
 1fe:	99 83       	std	Y+1, r25	; 0x01
 200:	90 ec       	ldi	r25, 0xC0	; 192
 202:	9a 83       	std	Y+2, r25	; 0x02
	send_command(firstcharadd[y] + x);
 204:	e1 e0       	ldi	r30, 0x01	; 1
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ec 0f       	add	r30, r28
 20a:	fd 1f       	adc	r31, r29
 20c:	e6 0f       	add	r30, r22
 20e:	f1 1d       	adc	r31, r1
 210:	90 81       	ld	r25, Z
 212:	89 0f       	add	r24, r25
 214:	0e 94 9a 00 	call	0x134	; 0x134 <send_command>
}
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <main>:
	}
	return c;
}

int main(void)
{
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	00 d0       	rcall	.+0      	; 0x228 <main+0x6>
 228:	00 d0       	rcall	.+0      	; 0x22a <main+0x8>
 22a:	1f 92       	push	r1
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
	char data[5];
	 control_dir |= (1<<rs) | (1<<rw) | (1<<enable); /* set control signal in output mode */
 230:	81 b3       	in	r24, 0x11	; 17
 232:	8c 61       	ori	r24, 0x1C	; 28
 234:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	85 ea       	ldi	r24, 0xA5	; 165
 238:	9e e0       	ldi	r25, 0x0E	; 14
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x18>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x1e>
 240:	00 00       	nop
	 _delay_ms(15);
	 send_command(0x01); /* Clear display */
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 9a 00 	call	0x134	; 0x134 <send_command>
 248:	8b e7       	ldi	r24, 0x7B	; 123
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0x2a>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x30>
 252:	00 00       	nop
	 _delay_ms(1.52);
	 send_command(0x38); /* Function Set (8-bit mode) */
 254:	88 e3       	ldi	r24, 0x38	; 56
 256:	0e 94 9a 00 	call	0x134	; 0x134 <send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	9c e0       	ldi	r25, 0x0C	; 12
 25c:	9a 95       	dec	r25
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0x3a>
 260:	00 00       	nop
	 _delay_us(37);
	 send_command(0x0C); /* Display On-OFF Control */
 262:	8c e0       	ldi	r24, 0x0C	; 12
 264:	0e 94 9a 00 	call	0x134	; 0x134 <send_command>
	 send_string ("    Project x");// displaying name
 268:	80 e6       	ldi	r24, 0x60	; 96
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
	 send_command(0xC0);
 270:	80 ec       	ldi	r24, 0xC0	; 192
 272:	0e 94 9a 00 	call	0x134	; 0x134 <send_command>
	 send_string("hello");
 276:	8e e6       	ldi	r24, 0x6E	; 110
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	2f e3       	ldi	r18, 0x3F	; 63
 280:	8d e0       	ldi	r24, 0x0D	; 13
 282:	93 e0       	ldi	r25, 0x03	; 3
 284:	21 50       	subi	r18, 0x01	; 1
 286:	80 40       	sbci	r24, 0x00	; 0
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x62>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x6c>
 28e:	00 00       	nop
	 _delay_ms(1000);
	  send_command(0x01); /* Clear display */
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 9a 00 	call	0x134	; 0x134 <send_command>
	  lcd_gotoxy(0,0);		/* Enter column and row position */
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_gotoxy>
	while(1)
	{
		Request();		/* send start pulse */
 29e:	0e 94 49 00 	call	0x92	; 0x92 <Request>
		Response();		/* receive response */
 2a2:	0e 94 59 00 	call	0xb2	; 0xb2 <Response>
		I_RH=Receive_data();	/* store first eight bit in I_RH */
 2a6:	0e 94 63 00 	call	0xc6	; 0xc6 <Receive_data>
 2aa:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <I_RH>
		D_RH=Receive_data();	/* store next eight bit in D_RH */
 2ae:	0e 94 63 00 	call	0xc6	; 0xc6 <Receive_data>
 2b2:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <D_RH>
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 2b6:	0e 94 63 00 	call	0xc6	; 0xc6 <Receive_data>
 2ba:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <I_Temp>
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 2be:	0e 94 63 00 	call	0xc6	; 0xc6 <Receive_data>
 2c2:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <D_Temp>
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
 2c6:	0e 94 63 00 	call	0xc6	; 0xc6 <Receive_data>
 2ca:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <CheckSum>
		
		if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 2ce:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <I_RH>
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <D_RH>
 2d8:	9f 01       	movw	r18, r30
 2da:	29 0f       	add	r18, r25
 2dc:	31 1d       	adc	r19, r1
 2de:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <I_Temp>
 2e2:	29 0f       	add	r18, r25
 2e4:	31 1d       	adc	r19, r1
 2e6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <D_Temp>
 2ea:	29 0f       	add	r18, r25
 2ec:	31 1d       	adc	r19, r1
 2ee:	48 2f       	mov	r20, r24
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	24 17       	cp	r18, r20
 2f4:	35 07       	cpc	r19, r21
 2f6:	49 f0       	breq	.+18     	; 0x30a <main+0xe8>
		{
			lcd_gotoxy(0,0);
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_gotoxy>
			send_string("Error");
 300:	84 e7       	ldi	r24, 0x74	; 116
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
 308:	5e c0       	rjmp	.+188    	; 0x3c6 <main+0x1a4>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 30a:	4a e0       	ldi	r20, 0x0A	; 10
 30c:	be 01       	movw	r22, r28
 30e:	6f 5f       	subi	r22, 0xFF	; 255
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	cf 01       	movw	r24, r30
 314:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__itoa_ncheck>
		
		else
		{
			itoa(I_RH,data,10);
			//lcd_gotoxy(11,0);
			lcd_gotoxy(0,0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_gotoxy>
			send_string(data);
 320:	ce 01       	movw	r24, r28
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
			send_string(".");
 328:	8a e7       	ldi	r24, 0x7A	; 122
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
			
			itoa(D_RH,data,10);
 330:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <D_RH>
 334:	4a e0       	ldi	r20, 0x0A	; 10
 336:	be 01       	movw	r22, r28
 338:	6f 5f       	subi	r22, 0xFF	; 255
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__itoa_ncheck>
			send_string(data);
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
			send_string("%");
 34a:	8c e7       	ldi	r24, 0x7C	; 124
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>

			itoa(I_Temp,data,10);
 352:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <I_Temp>
 356:	4a e0       	ldi	r20, 0x0A	; 10
 358:	be 01       	movw	r22, r28
 35a:	6f 5f       	subi	r22, 0xFF	; 255
 35c:	7f 4f       	sbci	r23, 0xFF	; 255
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__itoa_ncheck>
			//lcd_gotoxy(6,1);
			lcd_gotoxy(8,0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	88 e0       	ldi	r24, 0x08	; 8
 368:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_gotoxy>
			send_string(data);
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
			send_string(".");
 374:	8a e7       	ldi	r24, 0x7A	; 122
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
			
			itoa(D_Temp,data,10);
 37c:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <D_Temp>
 380:	4a e0       	ldi	r20, 0x0A	; 10
 382:	be 01       	movw	r22, r28
 384:	6f 5f       	subi	r22, 0xFF	; 255
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__itoa_ncheck>
			send_string(data);
 38e:	ce 01       	movw	r24, r28
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
			lcddata(0xDF);
 396:	8f ed       	ldi	r24, 0xDF	; 223
 398:	0e 94 ce 00 	call	0x19c	; 0x19c <lcddata>
			send_string("C ");
 39c:	8e e7       	ldi	r24, 0x7E	; 126
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
			
			itoa(CheckSum,data,10);
 3a4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <CheckSum>
 3a8:	4a e0       	ldi	r20, 0x0A	; 10
 3aa:	be 01       	movw	r22, r28
 3ac:	6f 5f       	subi	r22, 0xFF	; 255
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__itoa_ncheck>
			send_string(data);
 3b6:	ce 01       	movw	r24, r28
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
			send_string(" ");
 3be:	8f e7       	ldi	r24, 0x7F	; 127
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 c1 00 	call	0x182	; 0x182 <send_string>
 3c6:	83 ec       	ldi	r24, 0xC3	; 195
 3c8:	99 e0       	ldi	r25, 0x09	; 9
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <main+0x1a8>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <main+0x1ae>
 3d0:	00 00       	nop
 3d2:	65 cf       	rjmp	.-310    	; 0x29e <main+0x7c>

000003d4 <__itoa_ncheck>:
 3d4:	bb 27       	eor	r27, r27
 3d6:	4a 30       	cpi	r20, 0x0A	; 10
 3d8:	31 f4       	brne	.+12     	; 0x3e6 <__itoa_ncheck+0x12>
 3da:	99 23       	and	r25, r25
 3dc:	22 f4       	brpl	.+8      	; 0x3e6 <__itoa_ncheck+0x12>
 3de:	bd e2       	ldi	r27, 0x2D	; 45
 3e0:	90 95       	com	r25
 3e2:	81 95       	neg	r24
 3e4:	9f 4f       	sbci	r25, 0xFF	; 255
 3e6:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__utoa_common>

000003ea <__utoa_ncheck>:
 3ea:	bb 27       	eor	r27, r27

000003ec <__utoa_common>:
 3ec:	fb 01       	movw	r30, r22
 3ee:	55 27       	eor	r21, r21
 3f0:	aa 27       	eor	r26, r26
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	aa 1f       	adc	r26, r26
 3f8:	a4 17       	cp	r26, r20
 3fa:	10 f0       	brcs	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	a4 1b       	sub	r26, r20
 3fe:	83 95       	inc	r24
 400:	50 51       	subi	r21, 0x10	; 16
 402:	b9 f7       	brne	.-18     	; 0x3f2 <__utoa_common+0x6>
 404:	a0 5d       	subi	r26, 0xD0	; 208
 406:	aa 33       	cpi	r26, 0x3A	; 58
 408:	08 f0       	brcs	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40a:	a9 5d       	subi	r26, 0xD9	; 217
 40c:	a1 93       	st	Z+, r26
 40e:	00 97       	sbiw	r24, 0x00	; 0
 410:	79 f7       	brne	.-34     	; 0x3f0 <__utoa_common+0x4>
 412:	b1 11       	cpse	r27, r1
 414:	b1 93       	st	Z+, r27
 416:	11 92       	st	Z+, r1
 418:	cb 01       	movw	r24, r22
 41a:	0c 94 0f 02 	jmp	0x41e	; 0x41e <strrev>

0000041e <strrev>:
 41e:	dc 01       	movw	r26, r24
 420:	fc 01       	movw	r30, r24
 422:	67 2f       	mov	r22, r23
 424:	71 91       	ld	r23, Z+
 426:	77 23       	and	r23, r23
 428:	e1 f7       	brne	.-8      	; 0x422 <strrev+0x4>
 42a:	32 97       	sbiw	r30, 0x02	; 2
 42c:	04 c0       	rjmp	.+8      	; 0x436 <strrev+0x18>
 42e:	7c 91       	ld	r23, X
 430:	6d 93       	st	X+, r22
 432:	70 83       	st	Z, r23
 434:	62 91       	ld	r22, -Z
 436:	ae 17       	cp	r26, r30
 438:	bf 07       	cpc	r27, r31
 43a:	c8 f3       	brcs	.-14     	; 0x42e <strrev+0x10>
 43c:	08 95       	ret

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
